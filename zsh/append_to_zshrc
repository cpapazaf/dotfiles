export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

if [ "$TMUX" = "" ]; then tmux; fi

setopt prompt_subst
autoload -Uz vcs_info colors && colors
local returncode="%(?..%{$fg[red]%} %? â†µ%{$resetcolor%})"
zstyle ':vcs_info:*' stagedstr 'M'
zstyle ':vcs_info:*' unstagedstr 'M'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats '%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats \
  '%F{5}[%F{2}%b%F{5}] %F{2}%c%F{3}%u%f'
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
zstyle ':vcs_info:*' enable git
+vi-git-untracked() {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
     [[ $(git ls-files --other --directory --exclude-standard | sed q | wc -l | tr -d ' ') == 1 ]] ; then
    hook_com[unstaged]+='%F{1}??%f'
  fi
}

precmd () { vcs_info }
#PROMPT='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_} %f%# '
PROMPT='${returncode} %F{3}%3~ ${vcs_info_msg_0_} %f%# '
RPROMPT="[%D{%y/%m/%f}|%@]"

# use that to keep the history per zsh and not mess with other sessions
setopt noincappendhistory
setopt nosharehistory

source ~/.alias
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zsh/z.sh

function cd() {
  builtin cd "$@"

  if [[ -z "$VIRTUAL_ENV" ]] ; then
    ## If env folder is found then activate the virtualenv
      if [[ -d ./.pyvenv ]] ; then
        source ./.pyvenv/bin/activate
      fi
  else
    ## check the current folder belong to earlier VIRTUAL_ENV folder
    # if yes then do nothing
    # else deactivate
      parentdir="$(dirname "$VIRTUAL_ENV")"
      if [[ "$PWD"/ != "$parentdir"/* ]] ; then
        deactivate
      fi
  fi

  if [ -d ".git" ]; then
    git config --replace-all user.name $(git config --global user.name)
    git config --replace-all user.email $(git config --global user.email)

    while read line; do
      if [[ $line =~ "^\[.*\]$" ]] ; then
        after_bracket=${line#*\[};
        pure_string=${after_bracket%\]*};
        new_git_name=${pure_string%:*}
        new_git_email=${pure_string#*:};
      else
        if [[ $PWD =~ "^$line" ]]; then
          git config --replace-all user.name $new_git_name
          git config --replace-all user.email $new_git_email
        fi
      fi
    done <~/.git_multi_user_config

  fi

  if [ -d ".git" ]; then
    echo "[GIT] user.name: $(git config user.name), user.email: $(git config user.email)"
  fi

}

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
