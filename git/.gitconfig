[core]

	excludesfile = /Users/c.papazafeiropoulos/.gitignore_global
	editor = /usr/bin/vim

[difftool "sourcetree"]

	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 

[mergetool "sourcetree"]

	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[user]

	name = Christos Papazafeiropoulos
	email = c.papazafeiropoulos@klarna.com

[alias]

	po = "!git push -u origin HEAD:$(git rev-parse --abbrev-ref HEAD)"

	# Check commits for a specific file
	follow = log --follow --oneline --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s'

	# logs
	lg = log --color --graph --oneline  --abbrev-commit --date=short --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s'
  	lg-branch = log --color --abbrev-commit --date=short --oneline --no-merges --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s'  master..
	np = !"f() { t=`git rev-parse --abbrev-ref HEAD`; git lg origin/$t..$t; }; f"

	# branch
	br = branch

	# checkout
	co = checkout

	# stash
	sl = stash list
	ss = stash show -p

	# View the current working tree status using the short format
	st = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Push with setting the upstream too
	pu = push -u

	# Clone a repository including all submodules
	cl = clone --recursive

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

[push]

	default = current
